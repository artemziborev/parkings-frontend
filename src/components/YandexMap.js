import React, { useEffect, useRef, useState } from 'react';

const YandexMap = ({ parkings, onParkingSelect, selectedParking, onNearbySearch }) => {
    const mapRef = useRef(null);
    const mapInstanceRef = useRef(null);
    const [mapReady, setMapReady] = useState(false);
    const [searchMarker, setSearchMarker] = useState(null);
    const [nearbyMode, setNearbyMode] = useState(false);

    useEffect(() => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
        if (window.ymaps && !mapInstanceRef.current) {
            window.ymaps.ready(() => {
                const map = new window.ymaps.Map(mapRef.current, {
                    center: [55.76, 37.64], // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    zoom: 12,
                    controls: ['zoomControl', 'fullscreenControl', 'geolocationControl']
                });

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
                map.events.add('click', (e) => {
                    if (nearbyMode) {
                        const coords = e.get('coords');
                        handleMapClick(coords);
                    }
                });

                // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                map.events.add('mousemove', () => {
                    const container = map.container.getElement(); // –ü–æ–ª—É—á–∞–µ–º DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã
                    if (nearbyMode) {
                        container.style.cursor = 'crosshair';
                    } else {
                        container.style.cursor = 'grab';
                    }
                });

                mapInstanceRef.current = map;
                setMapReady(true);
            });
        }
    }, [nearbyMode]);

    useEffect(() => {
        if (mapReady && mapInstanceRef.current) {
            updateParkingsOnMap();
        }
    }, [parkings, mapReady, selectedParking]);

    const handleMapClick = (coords) => {
        const [longitude, latitude] = coords;

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –º–µ—Å—Ç–∞ –ø–æ–∏—Å–∫–∞
        addSearchMarker([longitude, latitude]);

        // –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–∞—Ä–∫–æ–≤–æ–∫
        if (onNearbySearch) {
            onNearbySearch({
                lat: latitude,
                lng: longitude
            });
        }
    };

    const addSearchMarker = (coords) => {
        const map = mapInstanceRef.current;

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä –ø–æ–∏—Å–∫–∞
        if (searchMarker) {
            map.geoObjects.remove(searchMarker);
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
        const marker = new window.ymaps.Placemark(coords, {
            balloonContentHeader: '–ü–æ–∏—Å–∫ –ø–∞—Ä–∫–æ–≤–æ–∫',
            balloonContentBody: '–ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ø–∞—Ä–∫–æ–≤–∫–∏ –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ...',
        }, {
            preset: 'islands#redSearchIcon',
            iconColor: '#ff6b6b'
        });

        map.geoObjects.add(marker);
        setSearchMarker(marker);
    };

    const toggleNearbyMode = () => {
        setNearbyMode(!nearbyMode);

        // –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–∂–∏–º–∞
        if (nearbyMode && searchMarker) {
            mapInstanceRef.current.geoObjects.remove(searchMarker);
            setSearchMarker(null);
        }
    };

const updateParkingsOnMap = () => {
    const map = mapInstanceRef.current;

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ `geoObjects`, –∫—Ä–æ–º–µ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ–∏—Å–∫–∞
    map.geoObjects.each((object) => {
        if (object !== searchMarker) {
            map.geoObjects.remove(object);
        }
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä–∫–æ–≤–æ–∫
    const collection = new window.ymaps.GeoObjectCollection();
    const bounds = [];

    parkings.forEach((parking) => {
        if (parking.coordinates && parking.coordinates.lat && parking.coordinates.lng) {
            const coords = [parking.coordinates.lat, parking.coordinates.lng];
            bounds.push(coords);

            let color = '#1e98ff'; // –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏–∫—É, –æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            if (parking.blocked) {
                color = '#808080'; // –°–µ—Ä—ã–π –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∫–æ–≤–æ–∫
            }

            // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É
            const placemark = new window.ymaps.Placemark(coords, {
                balloonContentHeader: parking.name || '–ü–∞—Ä–∫–æ–≤–∫–∞',
                balloonContentBody: `
        <div>
            <p><strong>–ê–¥—Ä–µ—Å:</strong> ${parking.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
            ${parking.subway ? `<p><strong>–ú–µ—Ç—Ä–æ:</strong> ${parking.subway}</p>` : ''}
            ${parking.zone_number ? `<p><strong>–ó–æ–Ω–∞:</strong> ${parking.zone_number}</p>` : ''}
            ${parking.blocked ? '<p style="color: red;"><strong>‚ö†Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞</strong></p>' : ''}
        </div>
    `,
                balloonContentFooter: `
        <button onclick="window.selectParking('${parking.id}')" 
                style="margin-right: 8px; padding: 8px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">
            –í—ã–±—Ä–∞—Ç—å
        </button>
        <button onclick="window.routeToParking('${parking.id}')" 
                style="padding: 8px; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer;">
            –ú–∞—Ä—à—Ä—É—Ç
        </button>
    `
            }, {
                preset: 'islands#circleIcon',
                // –ó–¥–µ—Å—å —É–±—Ä–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 'available'
                iconCaption: parking.blocked ? 'üö´' : ''
            });

            // –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä–∫–æ–≤–∫–∏
            if (selectedParking && selectedParking.id === parking.id) {
                placemark.options.set('iconColor', '#ff1493'); // –†–æ–∑–æ–≤—ã–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π
                placemark.options.set('iconCaption', '‚òÖ');
            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –Ω–∞ –º–µ—Ç–∫—É
            placemark.events.add('click', () => {
                onParkingSelect && onParkingSelect(parking);
            });

            collection.add(placemark);
        }
    });

    map.geoObjects.add(collection);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ä—Ç—ã –ø–æ –≤—Å–µ–º –º–µ—Ç–∫–∞–º (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Ä–∫–µ—Ä –ø–æ–∏—Å–∫–∞)
    if (bounds.length > 0 && !searchMarker) {
        map.setBounds(bounds, {
            checkZoomRange: true,
            zoomMargin: 30
        }).then(() => {
            if (map.getZoom() > 16) {
                map.setZoom(16);
            }
        });
    }
};

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –±–∞–ª—É–Ω–∞—Ö
    useEffect(() => {
        window.selectParking = (parkingId) => {
            const parking = parkings.find(p => p.id === parkingId);
            if (parking && onParkingSelect) {
                onParkingSelect(parking);
            }
        };

        window.routeToParking = (parkingId) => {
            const parking = parkings.find(p => p.id === parkingId);
            if (parking && parking.coordinates) {
                const url = `https://yandex.ru/maps/?rtext=~${parking.coordinates.lat},${parking.coordinates.lng}&rtt=auto`;
                window.open(url, '_blank');
            }
        };

        return () => {
            delete window.selectParking;
            delete window.routeToParking;
        };
    }, [parkings, onParkingSelect]);

    return (
        <div className="map-container">
            <div className="map-controls">
                <button
                    className={`nearby-btn ${nearbyMode ? 'active' : ''}`}
                    onClick={toggleNearbyMode}
                    title={nearbyMode ? '–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞' : '–ù–∞–π—Ç–∏ –ø–∞—Ä–∫–æ–≤–∫–∏ —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–æ–π –Ω–∞ –∫–∞—Ä—Ç–µ'}
                >
                    {nearbyMode ? '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫' : ' –ù–∞–π—Ç–∏ —Ä—è–¥–æ–º'}
                </button>

                {nearbyMode && (
                    <div className="nearby-hint">
                        <span> –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –ø–∞—Ä–∫–æ–≤–∫–∏</span>
                    </div>
                )}
            </div>

            <div
                ref={mapRef}
                className={`yandex-map ${nearbyMode ? 'search-mode' : ''}`}
                style={{ width: '100%', height: '500px' }}
            />

            <div className="map-legend">
                <div className="legend-item">
                    <span className="legend-color" style={{ backgroundColor: '#32cd32' }}></span>
                    –ú–Ω–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
                </div>
                <div className="legend-item">
                    <span className="legend-color" style={{ backgroundColor: '#ff8c00' }}></span>
                    –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
                </div>
                <div className="legend-item">
                    <span className="legend-color" style={{ backgroundColor: '#ff1e1e' }}></span>
                    –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
                </div>
                <div className="legend-item">
                    <span className="legend-color" style={{ backgroundColor: '#808080' }}></span>
                    –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
                </div>
                <div className="legend-item">
                    <span className="legend-color" style={{ backgroundColor: '#1e98ff' }}></span>
                    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                </div>
                {searchMarker && (
                    <div className="legend-item">
                        <span className="legend-color" style={{ backgroundColor: '#ff6b6b' }}></span>
                        –¢–æ—á–∫–∞ –ø–æ–∏—Å–∫–∞
                    </div>
                )}
            </div>
        </div>
    );
};

export default YandexMap;