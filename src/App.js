import React, { useState, useEffect } from 'react';
import axios from 'axios';
import YandexMap from './components/YandexMap';
import SearchPanel from './components/SearchPanel';
import ParkingDetails from './components/ParkingDetails';
import './App.css';

const API_BASE_URL = 'http://localhost:3847'; // URL –±—ç–∫–µ–Ω–¥ API

function App() {
  const [parkings, setParkings] = useState([]);
  const [filteredParkings, setFilteredParkings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searching, setSearching] = useState(false);
  const [error, setError] = useState(null);
  const [selectedParking, setSelectedParking] = useState(null);
  const [viewMode, setViewMode] = useState('map'); // 'map' –∏–ª–∏ 'list'

  useEffect(() => {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const userLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          fetchParkings(userLocation);
        },
        (error) => {
          console.log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ú–æ—Å–∫–≤—ã');
          fetchParkings(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        }
      );
    } else {
      fetchParkings(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    }
  }, []);

const fetchParkings = async (userLocation = null) => {
    try {
        setLoading(true);
        setError(null); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏

        let lat, long;
        
        if (userLocation && typeof userLocation.lat === 'number' && typeof userLocation.lng === 'number') {
            lat = userLocation.lat;
            long = userLocation.lng;
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ú–æ—Å–∫–≤—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            lat = 55.7558;
            long = 37.6176;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const queryParams = new URLSearchParams({
            lat: lat.toString(),
            long: long.toString(),
            limit: '100',          // –õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∫–æ–≤–æ–∫
            distance: '50000'      // –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö (50–∫–º)
        });

        const response = await axios.get(`${API_BASE_URL}/api/v1/mos_parking/parking?${queryParams}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç API
        if (!response.data || !Array.isArray(response.data.parkings)) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
        }

        const processedParkings = response.data.parkings.map(parking => ({
            id: parking.id || Math.random(), // Fallback ID –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            name: parking.parking_name || `–ü–∞—Ä–∫–æ–≤–∫–∞ ‚Ññ${parking.parking_number || parking.id || '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'}`,
            address: `${parking.street || ''} ${parking.house || ''}`.trim() || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
            coordinates: (parking.latitude && parking.longitude && 
                         typeof parking.latitude === 'number' && typeof parking.longitude === 'number') ? {
                lat: parking.latitude,
                lng: parking.longitude
            } : null, // –¢–µ–ø–µ—Ä—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ API
            capacity: parking.total_spaces || 0,
            available_spots: parking.total_spaces || 0, // –í –Ω–æ–≤–æ–º API –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
            zone_number: parking.parking_number || null,
            subway: null, // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –Ω–æ–≤–æ–º API
            price_info: null, // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –Ω–æ–≤–æ–º API
            category: null, // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –Ω–æ–≤–æ–º API
            blocked: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
            distance: typeof parking.distance_meters === 'number' ? parking.distance_meters : null, // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
            raw: parking
        }));

        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ä–∫–æ–≤–æ–∫:', processedParkings.length);
        setParkings(processedParkings);
        setFilteredParkings(processedParkings);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
        if (err.response && err.response.status === 500) {
          setError('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.');
        } else if (err.response && err.response.status === 404) {
          setError('API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω.');
        } else {
          setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3847.');
        }
    } finally {
        setLoading(false);
    }
};

  const handleSearch = async ({ query, filters }) => {
    console.log('üîç –ü–æ–∏—Å–∫:', query, filters);
    setSearching(true);
    setError(null); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏

    try {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –¥–µ–ª–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ API
      if (query && query.trim().length > 0) {
        const searchUrl = `${API_BASE_URL}/api/v1/mos_parking/parking/search?query=${encodeURIComponent(query.trim())}`;
        console.log('üåê –ü–æ–∏—Å–∫ –ø–æ API:', searchUrl);
        
        const response = await axios.get(searchUrl);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç API
        if (!response.data || !Array.isArray(response.data.parkings)) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –ø–æ–∏—Å–∫–∞');
        }

        const searchedParkings = response.data.parkings.map(parking => ({
            id: parking.id || Math.random(), // Fallback ID –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            name: parking.parking_name || `–ü–∞—Ä–∫–æ–≤–∫–∞ ‚Ññ${parking.parking_number || parking.id || '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'}`,
            address: `${parking.street || ''} ${parking.house || ''}`.trim() || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
            coordinates: (parking.latitude && parking.longitude && 
                         typeof parking.latitude === 'number' && typeof parking.longitude === 'number') ? {
                lat: parking.latitude,
                lng: parking.longitude
            } : null, // –¢–µ–ø–µ—Ä—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ API
            capacity: parking.total_spaces || 0,
            available_spots: parking.total_spaces || 0,
            zone_number: parking.parking_number || null,
            subway: null,
            price_info: null,
            category: null,
            blocked: false,
            distance: typeof parking.distance_meters === 'number' ? parking.distance_meters : null,
            raw: parking
          }));

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}":`, searchedParkings.length);
        setFilteredParkings(searchedParkings);
      } else {
        // –ò–Ω–∞—á–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        let filtered = [...(parkings || [])]; // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined

        // –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ
        if (filters && filters.onlyAvailable) {
          filtered = filtered.filter(parking =>
              parking && !parking.blocked && parking.available_spots > 0
          );
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç API)
        if (filters && filters.maxDistance && parseFloat(filters.maxDistance) > 0) {
          const maxDistanceKm = parseFloat(filters.maxDistance) * 1000; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–µ—Ç—Ä—ã
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ API
          filtered = filtered.filter(parking => {
            return parking && parking.distance !== undefined && parking.distance !== null && parking.distance <= maxDistanceKm;
          });

          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ)
          filtered.sort((a, b) => {
            const distanceA = (a && typeof a.distance === 'number') ? a.distance : Infinity;
            const distanceB = (b && typeof b.distance === 'number') ? b.distance : Infinity;
            return distanceA - distanceB;
          });
        }

        setFilteredParkings(filtered);
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', err);
      if (err.response && err.response.status === 404) {
        const searchTerm = (query && query.trim()) || '–∑–∞–ø—Ä–æ—Å—É';
        setError(`–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: "–æ—Ö–æ—Ç–Ω—ã–π", "–ø–∞—Ä–∫–æ–≤–∫–∞", "–∫—É—Ç—É–∑–æ–≤—Å–∫–∏–π"`);
        setFilteredParkings([]);
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ä–∫–æ–≤–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
      }
    } finally {
      setSearching(false);
    }
  };

  const handleClearSearch = () => {
    setFilteredParkings(parkings);
    setSelectedParking(null);
  };

  const handleNearbySearch = async (clickCoords) => {
    console.log('üéØ –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–∞—Ä–∫–æ–≤–æ–∫ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', clickCoords);
    setSearching(true);
    setError(null); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (!clickCoords || typeof clickCoords.lat !== 'number' || typeof clickCoords.lng !== 'number') {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞');
      }

      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∫–æ–≤–æ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ 200–º —Å –ª–∏–º–∏—Ç–æ–º 5
      const queryParams = new URLSearchParams({
        lat: clickCoords.lat.toString(),
        long: clickCoords.lng.toString(),
        limit: '5',        // –õ–∏–º–∏—Ç 5 –ø–∞—Ä–∫–æ–≤–æ–∫
        distance: '200'    // –†–∞–¥–∏—É—Å 200 –º–µ—Ç—Ä–æ–≤ (~2-3 –º–∏–Ω—É—Ç—ã –ø–µ—à–∫–æ–º)
      });

      const apiUrl = `${API_BASE_URL}/api/v1/mos_parking/parking?${queryParams}`;
      console.log('üì° –ó–∞–ø—Ä–æ—Å API:', apiUrl);
      
      const response = await axios.get(apiUrl);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç API
      if (!response.data || !Array.isArray(response.data.parkings)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
      }

      const nearbyParkings = response.data.parkings.map(parking => ({
        id: parking.id || Math.random(), // Fallback ID –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        name: parking.parking_name || `–ü–∞—Ä–∫–æ–≤–∫–∞ ‚Ññ${parking.parking_number || parking.id || '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'}`,
        address: `${parking.street || ''} ${parking.house || ''}`.trim() || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
        coordinates: (parking.latitude && parking.longitude && 
                     typeof parking.latitude === 'number' && typeof parking.longitude === 'number') ? {
            lat: parking.latitude,
            lng: parking.longitude
        } : null, // –¢–µ–ø–µ—Ä—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ API
        capacity: parking.total_spaces || 0,
        available_spots: parking.total_spaces || 0,
        zone_number: parking.parking_number || null,
        subway: null,
        price_info: null,
        category: null,
        blocked: false,
        distance: typeof parking.distance_meters === 'number' ? parking.distance_meters : null, // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö –æ—Ç —Ç–æ—á–∫–∏ –∫–ª–∏–∫–∞
        raw: parking
      }));

      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä–∫–æ–≤–æ–∫:', nearbyParkings.length);
      setFilteredParkings(nearbyParkings);

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é –ø–∞—Ä–∫–æ–≤–∫—É
      if (nearbyParkings.length > 0) {
        setSelectedParking(nearbyParkings[0]);
        console.log('üéØ –í—ã–±—Ä–∞–Ω–∞ –±–ª–∏–∂–∞–π—à–∞—è:', nearbyParkings[0].name);
      } else {
        console.log('üòû –ü–∞—Ä–∫–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–¥–∏—É—Å–µ 200–º');
        setError('–í —Ä–∞–¥–∏—É—Å–µ 200 –º–µ—Ç—Ä–æ–≤ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏ –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–∞—Ä–∫–æ–≤–æ–∫:', err);
      if (err.response && err.response.status === 404) {
        setError('–í —Ä–∞–¥–∏—É—Å–µ 200 –º–µ—Ç—Ä–æ–≤ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏ –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        setFilteredParkings([]);
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–∞—Ä–∫–æ–≤–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
      }
    } finally {
      setSearching(false);
    }
  };

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤)
  const calculateDistance = (lat1, lon1, lat2, lon2) => {
    const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
        Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  };

  const handleParkingSelect = (parking) => {
    setSelectedParking(parking);
  };

  if (loading) {
    return (
        <div className="App">
          <div className="loading">
            <div className="spinner"></div>
            –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä–∫–æ–≤–∫–∞—Ö...
          </div>
        </div>
    );
  }

  return (
      <div className="App">
        <header className="App-header">
          <img
            src="/maskot.png"
            alt="Maskot"
            className="header-maskot"
          />
          <h1>–ü–æ–∏—Å–∫ –ø–∞—Ä–∫–æ–≤–æ–∫ –≤ –ú–æ—Å–∫–≤–µ</h1>
          <div className="view-toggle">
            <button
                className={viewMode === 'map' ? 'active' : ''}
                onClick={() => setViewMode('map')}>
              Ô∏è –ö–∞—Ä—Ç–∞
            </button>
            <button
                className={viewMode === 'list' ? 'active' : ''}
                onClick={() => setViewMode('list')}>
              –°–ø–∏—Å–æ–∫
            </button>
          </div>
        </header>

        <SearchPanel
            onSearch={handleSearch}
            onClearSearch={handleClearSearch}
            isSearching={searching}
        />

        <div className="results-info">
          <p>
            –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä–∫–æ–≤–æ–∫: <strong>{filteredParkings.length}</strong> –∏–∑ {parkings.length}
            {selectedParking && (
                <span className="selected-info">
              {' '} | –í—ã–±—Ä–∞–Ω–∞: {selectedParking.name}
            </span>
            )}
          </p>
        </div>

        {error && (
            <div className="error">
              {error}
              <button onClick={fetchParkings}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
            </div>
        )}

        <main className="main-content">
          <div className={`content-layout ${selectedParking ? 'with-details' : ''}`}>
            <div className="map-section">
              {viewMode === 'map' ? (
                  <YandexMap
                      parkings={filteredParkings}
                      onParkingSelect={handleParkingSelect}
                      selectedParking={selectedParking}
                      onNearbySearch={handleNearbySearch}
                  />
              ) : (
                  <ParkingList
                      parkings={filteredParkings}
                      onParkingSelect={handleParkingSelect}
                      selectedParking={selectedParking}
                  />
              )}
            </div>

            {selectedParking && (
                <div className="details-section">
                  <ParkingDetails
                      parking={selectedParking}
                      onClose={() => setSelectedParking(null)}
                  />
                </div>
            )}
          </div>
        </main>
      </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–∫–æ–≤–æ–∫
function ParkingList({ parkings, onParkingSelect, selectedParking }) {
  if (parkings.length === 0) {
    return (
        <div className="no-data">
          <div className="no-data-icon"></div>
          <h3>–ü–∞—Ä–∫–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É</p>
        </div>
    );
  }

  return (
      <div className="parking-list">
        <div className="parking-grid">
          {parkings.map((parking, index) => (
              <div
                  key={parking.id}
                  className={`parking-card ${selectedParking?.id === parking.id ? 'selected' : ''} ${parking.blocked ? 'blocked' : ''}`}
                  onClick={() => onParkingSelect(parking)}
              >
                <div className="card-header">
                  <div className="title-section">
                    <h3>{parking.name}</h3>
                    {parking.zone_number && (
                        <span className="zone-badge">–ó–æ–Ω–∞ {parking.zone_number}</span>
                    )}
                  </div>
                  <div className="badges-group">
                    {parking.distance !== undefined && (
                        <span className={`distance-badge ${index === 0 ? 'closest' : ''}`}>
                          {Math.round(parking.distance)} –º
                        </span>
                    )}
                    {index === 0 && parking.distance !== undefined && (
                        <span className="closest-badge">–ë–ª–∏–∂–∞–π—à–∞—è</span>
                    )}
                  </div>
                </div>

                <div className="parking-info">
                  <p><strong> –ê–¥—Ä–µ—Å:</strong> {parking.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>

                  {parking.subway && (
                      <p><strong> –ú–µ—Ç—Ä–æ:</strong> {parking.subway}</p>
                  )}

                  {parking.capacity > 0 && (
                      <p className="capacity-info">
                        <strong> –ú–µ—Å—Ç:</strong>
                        <span className={parking.available_spots > 0 ? 'available' : 'full'}>
                    {parking.available_spots}/{parking.capacity}
                  </span>
                      </p>
                  )}

                  {parking.blocked && (
                      <p className="blocked-status">‚ö†Ô∏è –ü–∞—Ä–∫–æ–≤–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞</p>
                  )}
                </div>
              </div>
          ))}
        </div>
      </div>
  );
}

export default App;