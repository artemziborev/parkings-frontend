import React, { useEffect, useRef, useState } from 'react';

const YandexMap = ({ parkings, onParkingSelect, selectedParking, onNearbySearch }) => {
    const mapRef = useRef(null);
    const mapInstanceRef = useRef(null);
    const [mapReady, setMapReady] = useState(false);
    const [searchMarker, setSearchMarker] = useState(null);
    const [customBalloon, setCustomBalloon] = useState(null); // –ö–∞—Å—Ç–æ–º–Ω—ã–π –±–∞–ª—É–Ω

    useEffect(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Yandex Maps API –∑–∞–≥—Ä—É–∂–µ–Ω
        if (!window.ymaps) {
            console.error('‚ùå Yandex Maps API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
            console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –∑–∞–≥—Ä—É–∑–∫—É —Å–∫—Ä–∏–ø—Ç–∞ –≤ index.html');
            return;
        }

        console.log('‚úÖ Yandex Maps API –∑–∞–≥—Ä—É–∂–µ–Ω, –≤–µ—Ä—Å–∏—è:', window.ymaps.version);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
        if (window.ymaps && !mapInstanceRef.current) {
            window.ymaps.ready(() => {
                try {
                    console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É...');
                    const map = new window.ymaps.Map(mapRef.current, {
                        center: [55.76, 37.64], // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        zoom: 12,
                        controls: ['zoomControl', 'fullscreenControl', 'geolocationControl']
                    });

                    console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, —Ü–µ–Ω—Ç—Ä:', map.getCenter(), '–∑—É–º:', map.getZoom());

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω)
                    map.events.add('click', (e) => {
                        try {
                            const coords = e.get('coords');
                            if (coords && coords.length >= 2) {
                                console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', coords);
                                handleMapClick(coords);
                                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –±–∞–ª—É–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–∞—Ä—Ç–µ
                                setCustomBalloon(null);
                            }
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ:', error);
                        }
                    });

                    // –ö—É—Ä—Å–æ—Ä –¥–ª—è –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–µ
                    map.events.add('mousemove', () => {
                        try {
                            const container = map.container.getElement();
                            if (container) {
                                container.style.cursor = 'crosshair';
                            }
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫—É—Ä—Å–æ—Ä–∞:', error);
                        }
                    });

                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç—ã
                    map.events.add('sizechange', () => {
                        console.log('üìê –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–∑–º–µ–Ω–∏–ª—Å—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–ª—É–Ω');
                        setCustomBalloon(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–ª—É–Ω –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
                    });

                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    setTimeout(() => {
                        map.container.fitToViewport();
                        console.log('‚úÖ –†–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
                    }, 500);

                    mapInstanceRef.current = map;
                    setMapReady(true);
                    console.log('üéâ –ö–∞—Ä—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
                }
            });
        }
    }, []);

    useEffect(() => {
        if (mapReady && mapInstanceRef.current) {
            try {
                updateParkingsOnMap();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–∫–æ–≤–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ:', error);
            }
        }
    }, [parkings, mapReady, selectedParking]);

    const handleMapClick = (coords) => {
        try {
            // –í Yandex Maps coords –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ [lat, lng]
            const [latitude, longitude] = coords;

            if (typeof latitude !== 'number' || typeof longitude !== 'number') {
                console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', coords);
                return;
            }

            console.log('üó∫Ô∏è –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ:', { latitude, longitude });

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –º–µ—Å—Ç–∞ –ø–æ–∏—Å–∫–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Yandex: [lat, lng])
            addSearchMarker([latitude, longitude]);

            // –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–∞—Ä–∫–æ–≤–æ–∫
            if (onNearbySearch && typeof onNearbySearch === 'function') {
                onNearbySearch({
                    lat: latitude,
                    lng: longitude
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ handleMapClick:', error);
        }
    };

    const addSearchMarker = (coords) => {
        try {
            const map = mapInstanceRef.current;
            if (!map || !coords || coords.length < 2) {
                console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                return;
            }

            console.log('üî¥ –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö:', coords);

            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä –ø–æ–∏—Å–∫–∞
            if (searchMarker) {
                console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä');
                map.geoObjects.remove(searchMarker);
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
            const marker = new window.ymaps.Placemark(coords, {
                balloonContentHeader: '–ü–æ–∏—Å–∫ –ø–∞—Ä–∫–æ–≤–æ–∫',
                balloonContentBody: '–ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ø–∞—Ä–∫–æ–≤–∫–∏ –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ...',
            }, {
                preset: 'islands#redIcon',
                iconColor: '#ff0000'
            });

            console.log('‚úÖ –ú–∞—Ä–∫–µ—Ä —Å–æ–∑–¥–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É');
            map.geoObjects.add(marker);
            setSearchMarker(marker);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞:', error);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–∞–ª—É–Ω–∞
    const showCustomBalloon = (parking, coords) => {
        const map = mapInstanceRef.current;
        if (!map) {
            console.error('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–∞–ª—É–Ω–∞');
            return;
        }

        console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª—É–Ω –¥–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏:', parking.name);
        console.log('üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ:', coords);

        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã
            map.container.fitToViewport();

            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Ä—ã –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
            setTimeout(() => {
                try {
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Ä—Ç—ã –≤ –ø–∏–∫—Å–µ–ª–∏
                    const pixelCoords = map.converter.globalToPage(coords);
                    console.log('üñ•Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö:', pixelCoords);

                    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç—ã
                    const mapContainer = mapRef.current;
                    const mapRect = mapContainer.getBoundingClientRect();
                    console.log('üìè –†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç—ã:', {
                        width: mapRect.width,
                        height: mapRect.height,
                        top: mapRect.top,
                        left: mapRect.left
                    });

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ
                    if (pixelCoords[0] < 0 || pixelCoords[0] > mapRect.width ||
                        pixelCoords[1] < 0 || pixelCoords[1] > mapRect.height) {
                        console.warn('‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–∞–ª—É–Ω–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∫–∞—Ä—Ç—ã:', pixelCoords);
                        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –±–∞–ª—É–Ω –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ
                        pixelCoords[0] = mapRect.width / 2;
                        pixelCoords[1] = mapRect.height / 2;
                        console.log('üîß –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', pixelCoords);
                    }

                    const balloonData = {
                        parking: parking,
                        x: pixelCoords[0],
                        y: pixelCoords[1],
                        coords: coords,
                        mapRect: mapRect
                    };

                    console.log('üíæ –î–∞–Ω–Ω—ã–µ –±–∞–ª—É–Ω–∞:', balloonData);

                    setCustomBalloon(balloonData);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
                    setTimeout(() => {
                        console.log('‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–ª—É–Ω–∞ —á–µ—Ä–µ–∑ 100–º—Å...');
                        console.log('‚úÖ –ë–∞–ª—É–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö:', pixelCoords);
                    }, 100);

                } catch (innerError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', innerError);
                    // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª—É–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã
                    const mapContainer = mapRef.current;
                    const mapRect = mapContainer.getBoundingClientRect();
                    setCustomBalloon({
                        parking: parking,
                        x: mapRect.width / 2,
                        y: mapRect.height / 2,
                        coords: coords,
                        mapRect: mapRect
                    });
                    console.log('üÜò –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª—É–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã –∫–∞–∫ fallback');
                }
            }, 100); // 100–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–ª—É–Ω–∞:', error);
        }
    };

    const updateParkingsOnMap = () => {
        try {
            const map = mapInstanceRef.current;
            if (!map) {
                console.error('–ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                return;
            }

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã –ø–∞—Ä–∫–æ–≤–æ–∫
            map.geoObjects.removeAll();

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª
            if (searchMarker) {
                map.geoObjects.add(searchMarker);
            }

            if (!parkings || parkings.length === 0) {
                console.log('–ù–µ—Ç –ø–∞—Ä–∫–æ–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                return;
            }

            console.log('üó∫Ô∏è –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è', parkings.length, '–ø–∞—Ä–∫–æ–≤–æ–∫');
            const bounds = [];

            parkings.forEach((parking, index) => {
                try {
                    if (!parking.coordinates ||
                        typeof parking.coordinates.lat !== 'number' ||
                        typeof parking.coordinates.lng !== 'number') {
                        console.warn('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∫–æ–≤–∫—É –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', parking.id);
                        return;
                    }

                    const coords = [parking.coordinates.lat, parking.coordinates.lng];
                    bounds.push(coords);

                    const iconColor = selectedParking && selectedParking.id === parking.id ? '#ff0000' : '#0066ff';
                    const iconPreset = 'islands#dotIcon';

                    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä–∫–µ—Ä –±–µ–∑ –±–∞–ª—É–Ω–∞
                    const placemark = new window.ymaps.Placemark(coords, {
                        hintContent: parking.name || '–ü–∞—Ä–∫–æ–≤–∫–∞'
                    }, {
                        preset: iconPreset,
                        iconColor: iconColor
                    });

                    // –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –±–∞–ª—É–Ω
                    placemark.events.add('click', function (e) {
                        console.log('üéØ –ö–ª–∏–∫ –ø–æ –º–∞—Ä–∫–µ—Ä—É:', parking.name);

                        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
                        e.preventDefault();

                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –±–∞–ª—É–Ω
                        showCustomBalloon(parking, coords);

                        // –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ä–∫–æ–≤–∫—É
                        if (onParkingSelect && typeof onParkingSelect === 'function') {
                            onParkingSelect(parking);
                        }
                    });

                    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø—Ä—è–º–æ –Ω–∞ –∫–∞—Ä—Ç—É
                    map.geoObjects.add(placemark);
                    console.log(`‚úÖ –ú–∞—Ä–∫–µ—Ä ${index + 1} —Å–æ–∑–¥–∞–Ω –¥–ª—è:`, parking.name);

                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –ø–∞—Ä–∫–æ–≤–∫–∏:', parking.id, error);
                }
            });

            console.log('‚úÖ –í—Å–µ –º–∞—Ä–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç—É');

            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ä—Ç—ã –ø–æ –≤—Å–µ–º –º–µ—Ç–∫–∞–º (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Ä–∫–µ—Ä –ø–æ–∏—Å–∫–∞)
            if (bounds.length > 0 && !searchMarker) {
                try {
                    console.log('üó∫Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã –ø–æ', bounds.length, '—Ç–æ—á–∫–∞–º');
                    map.setBounds(bounds, {
                        checkZoomRange: true,
                        zoomMargin: 30
                    }).then(() => {
                        if (map.getZoom() > 16) {
                            map.setZoom(16);
                        }
                        console.log('‚úÖ –ì—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
                    }).catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ä—Ç—ã:', error);
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ä—Ç—ã:', error);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ updateParkingsOnMap:', error);
        }
    };

    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    useEffect(() => {
        try {
            // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º)
            window.routeToParking = (parkingId) => {
                try {
                    console.log('üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∫ –ø–∞—Ä–∫–æ–≤–∫–µ —Å ID:', parkingId);
                    const parking = parkings.find(p => p.id === parkingId);
                    if (parking && parking.coordinates &&
                        typeof parking.coordinates.lat === 'number' &&
                        typeof parking.coordinates.lng === 'number') {
                        const url = `https://yandex.ru/maps/?rtext=~${parking.coordinates.lat},${parking.coordinates.lng}&rtt=auto`;
                        window.open(url, '_blank');
                        console.log('‚úÖ –û—Ç–∫—Ä—ã—Ç –º–∞—Ä—à—Ä—É—Ç –∫:', parking.name);
                    } else {
                        console.warn('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
                }
            };

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã
            window.checkMapState = () => {
                const map = mapInstanceRef.current;
                if (map) {
                    console.log('üó∫Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã:');
                    console.log('- –¶–µ–Ω—Ç—Ä:', map.getCenter());
                    console.log('- –ó—É–º:', map.getZoom());
                    console.log('- –û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', map.geoObjects.getLength());
                    console.log('- –ü–∞—Ä–∫–æ–≤–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', parkings.length);
                    return {
                        center: map.getCenter(),
                        zoom: map.getZoom(),
                        objectsCount: map.geoObjects.getLength(),
                        parkingsCount: parkings.length
                    };
                } else {
                    console.log('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                    return { error: '–ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' };
                }
            };

            console.log('‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω—ã');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:', error);
        }

        return () => {
            try {
                delete window.routeToParking;
                delete window.checkMapState;
                console.log('üóëÔ∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ—É–Ω–∫—Ü–∏–π:', error);
            }
        };
    }, [parkings, onParkingSelect]);

    return (
        <div className="map-container" style={{ position: 'relative' }}>
            <div className="map-controls">
                <div className="map-hint">
                    <span>üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ 5 –±–ª–∏–∂–∞–π—à–∏—Ö –ø–∞—Ä–∫–æ–≤–æ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ 200–º</span>
                </div>
            </div>

            <div
                ref={mapRef}
                className="yandex-map"
                style={{ width: '100%', height: '500px' }}
            />

            {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –±–∞–ª—É–Ω */}
            {customBalloon && (
                <div
                    className="custom-balloon"
                    style={{
                        position: 'absolute',
                        left: Math.max(10, customBalloon.x - 150),
                        top: Math.max(10, customBalloon.y - 120),
                        zIndex: 9999,
                        background: '#ffffff',
                        border: '3px solid #ff0000', // –ö—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
                        borderRadius: '10px',
                        padding: '15px',
                        minWidth: '280px',
                        maxWidth: '350px',
                        boxShadow: '0 8px 32px rgba(0, 0, 0, 0.5)',
                        fontSize: '14px',
                        pointerEvents: 'auto' // –í–∞–∂–Ω–æ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                    }}
                    onClick={(e) => {
                        e.stopPropagation();
                        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –±–∞–ª—É–Ω—É');
                    }}
                >
                    {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    <div style={{
                        position: 'absolute',
                        top: '-25px',
                        left: '0',
                        background: 'yellow',
                        padding: '2px 6px',
                        fontSize: '10px',
                        borderRadius: '3px'
                    }}>
                        DEBUG: x={Math.round(customBalloon.x)}, y={Math.round(customBalloon.y)}
                    </div> */}

                    <button
                        onClick={(e) => {
                            e.stopPropagation();
                            console.log('‚ùå –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–ª—É–Ω');
                            setCustomBalloon(null);
                        }}
                        style={{
                            position: 'absolute',
                            top: '8px',
                            right: '8px',
                            background: '#ff0000',
                            color: 'white',
                            border: 'none',
                            fontSize: '18px',
                            cursor: 'pointer',
                            width: '24px',
                            height: '24px',
                            borderRadius: '50%',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center'
                        }}
                    >
                        √ó
                    </button>

                    <h4 style={{
                        margin: '0 0 12px 0',
                        color: '#333',
                        fontSize: '16px',
                        fontWeight: 'bold'
                    }}>
                        {customBalloon.parking.name || '–ü–∞—Ä–∫–æ–≤–∫–∞'}
                    </h4>

                    {customBalloon.parking.address && (
                        <p style={{ margin: '8px 0', color: '#666', lineHeight: '1.4' }}>
                            <strong>üìç –ê–¥—Ä–µ—Å:</strong> {customBalloon.parking.address}
                        </p>
                    )}

                    {customBalloon.parking.capacity > 0 && (
                        <p style={{ margin: '8px 0', color: '#666', lineHeight: '1.4' }}>
                            <strong>üöó –ú–µ—Å—Ç:</strong> {customBalloon.parking.available_spots}/{customBalloon.parking.capacity}
                        </p>
                    )}

                    {customBalloon.parking.distance !== undefined && customBalloon.parking.distance !== null && (
                        <p style={{ margin: '8px 0', color: '#666', lineHeight: '1.4' }}>
                            <strong>üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> {Math.round(customBalloon.parking.distance)} –º
                        </p>
                    )}

                    <div style={{ marginTop: '15px', display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
                        <button
                            onClick={(e) => {
                                e.stopPropagation();
                                console.log('‚úÖ –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ä–∫–æ–≤–∫—É:', customBalloon.parking.name);
                                if (onParkingSelect) {
                                    onParkingSelect(customBalloon.parking);
                                }
                                setCustomBalloon(null);
                            }}
                            style={{
                                background: '#007bff',
                                color: 'white',
                                border: 'none',
                                padding: '10px 15px',
                                borderRadius: '5px',
                                cursor: 'pointer',
                                fontSize: '13px',
                                fontWeight: 'bold'
                            }}
                        >
                            –í—ã–±—Ä–∞—Ç—å
                        </button>
                        <button
                            onClick={(e) => {
                                e.stopPropagation();
                                console.log('üó∫Ô∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –∫:', customBalloon.parking.name);
                                window.routeToParking(customBalloon.parking.id);
                                setCustomBalloon(null);
                            }}
                            style={{
                                background: '#28a745',
                                color: 'white',
                                border: 'none',
                                padding: '10px 15px',
                                borderRadius: '5px',
                                cursor: 'pointer',
                                fontSize: '13px',
                                fontWeight: 'bold'
                            }}
                        >
                            –ú–∞—Ä—à—Ä—É—Ç
                        </button>
                    </div>

                    {/* –£–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ */}
                    <div style={{
                        position: 'absolute',
                        bottom: '-10px',
                        left: '50%',
                        transform: 'translateX(-50%)',
                        width: '0',
                        height: '0',
                        borderLeft: '10px solid transparent',
                        borderRight: '10px solid transparent',
                        borderTop: '10px solid #ff0000'
                    }}></div>
                </div>
            )}

            {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            {customBalloon && (
                <div style={{
                    position: 'absolute',
                    top: '10px',
                    left: '10px',
                    background: 'rgba(0, 0, 0, 0.8)',
                    color: 'white',
                    padding: '8px',
                    borderRadius: '4px',
                    fontSize: '11px',
                    zIndex: 10000,
                    fontFamily: 'monospace'
                }}>
                    üîç –ë–ê–õ–£–ù –ê–ö–¢–ò–í–ï–ù<br/>
                    –ü–∞—Ä–∫–æ–≤–∫–∞: {customBalloon.parking.name}<br/>
                    X: {Math.round(customBalloon.x)} Y: {Math.round(customBalloon.y)}<br/>
                    {new Date().toLocaleTimeString()}
                </div>
            )} */}
        </div>
    );
};

export default YandexMap;